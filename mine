import pygame
from pygame.locals import *
from OpenGL.GL import *
from OpenGL.GLU import *
import numpy as np
from math import sqrt
from PIL import Image  # Для загрузки текстур

# Размер блока и размер мира
BLOCK_SIZE = 1
WORLD_SIZE = 10

# Цвета
SKY_COLOR = (0.53, 0.81, 0.92)  # Цвет неба

# Параметры игрока
player_pos = [0, 2, 5]  # Позиция игрока
player_angle = [0, 0]  # Угол камеры [вверх/вниз, вправо/влево]
is_jumping = False
jump_speed = 0.2  # Скорость прыжка
vertical_velocity = 0  # Вертикальная скорость
gravity = -0.05  # Гравитация
ground_level = 2  # Уровень земли
on_ground = True  # Флаг, чтобы проверить, находится ли игрок на земле

# Параметры окна
WINDOW_WIDTH = 800
WINDOW_HEIGHT = 600

# Список блоков
blocks = []
vbo = None  # Буфер для VBO
vertices_list = []  # Лист для вершин блоков
texture_id = None  # ID текстуры

# Функция для загрузки текстуры
def load_texture(file_name):
    
    """Загружает текстуру из файла и возвращает ID текстуры"""
    try:
        image = Image.open(file_name)
        image = image.transpose(Image.FLIP_TOP_BOTTOM)  # OpenGL использует перевёрнутую по оси Y текстуру

        img_data = image.convert("RGBA").tobytes()
        width, height = image.size

        texture_id = glGenTextures(1)
        glBindTexture(GL_TEXTURE_2D, texture_id)

        # Устанавливаем параметры текстуры для маленьких текстур (без сглаживания)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
        
        # Эти параметры гарантируют, что текстура будет корректно отображаться:
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT)

        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, img_data)

        # Не отвязываем текстуру после загрузки
        # glBindTexture(GL_TEXTURE_2D, 0)

        print(f"Текстура успешно загружена: {file_name}, ID: {texture_id}")
        return texture_id
    except Exception as e:
        print(f"Ошибка загрузки текстуры: {e}")
        return 0

# Включение освещения и настройка фиксированного источника света
def setup_lighting():
    # Включаем освещение
    glEnable(GL_LIGHTING)
    
    # Включаем первый источник света GL_LIGHT0
    glEnable(GL_LIGHT0)
    
    # Фиксированная позиция света (например, над сценой, с координатами вверху)
    light_position = [0.0, 10.0, 0.0, 1.0]  # w = 1.0 делает его позиционным, а не направленным
    glLightfv(GL_LIGHT0, GL_POSITION, light_position)
    
    # Настраиваем параметры света
    ambient_light = [0.3, 0.3, 0.3, 1.0]  # Окружающий свет (чуть ярче для мягкого освещения)
    diffuse_light = [1.0, 1.0, 1.0, 1.0]  # Диффузный свет (белый)
    specular_light = [0.5, 0.5, 0.5, 1.0]  # Спекулярный свет (для блеска)

    glLightfv(GL_LIGHT0, GL_AMBIENT, ambient_light)
    glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse_light)
    glLightfv(GL_LIGHT0, GL_SPECULAR, specular_light)

    # Настраиваем материал объектов (например, блоков), чтобы они корректно отражали свет
    glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE, [1.0, 1.0, 1.0, 1.0])  # Цвет объектов
    glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, [1.0, 1.0, 1.0, 1.0])  # Спекулярные отражения
    glMaterialf(GL_FRONT_AND_BACK, GL_SHININESS, 50.0)  # "Гладкость" блеска

# Функция для создания вершин куба с текстурными координатами
def create_cube_vertices_with_texcoords(x, y, z):
    """Создаёт вершины куба с координатами текстуры"""
    vertices = [
        [x, y, z], [x + BLOCK_SIZE, y, z], [x + BLOCK_SIZE, y + BLOCK_SIZE, z], [x, y + BLOCK_SIZE, z],
        [x, y, z + BLOCK_SIZE], [x + BLOCK_SIZE, y, z + BLOCK_SIZE], [x + BLOCK_SIZE, y + BLOCK_SIZE, z + BLOCK_SIZE], [x, y + BLOCK_SIZE, z + BLOCK_SIZE]
    ]
    faces = [[0, 1, 2, 3], [4, 5, 6, 7], [0, 1, 5, 4], [2, 3, 7, 6], [0, 3, 7, 4], [1, 2, 6, 5]]
    
    texcoords = [
        [0, 0], [1, 0], [1, 1], [0, 1],  # Текстурные координаты
        [0, 0], [1, 0], [1, 1], [0, 1],
        [0, 0], [1, 0], [1, 1], [0, 1],
        [0, 0], [1, 0], [1, 1], [0, 1],
        [0, 0], [1, 0], [1, 1], [0, 1],
        [0, 0], [1, 0], [1, 1], [0, 1]
    ]
    
    vertex_data = []
    for i, face in enumerate(faces):
        for vertex in face:
            vertex_data.extend(vertices[vertex])
            vertex_data.extend(texcoords[i * 4 + face.index(vertex)])  # Добавляем текстурные координаты
    return vertex_data

# Функция для обновления данных в VBO
def update_vbo():
    global vbo, vertices_list
    if vbo is None:
        vbo = glGenBuffers(1)
    
    # Генерация новых вершин
    vertices_list = []
    for block in blocks:
        vertices_list.extend(create_cube_vertices_with_texcoords(block[0], block[1], block[2]))

    # Конвертируем данные вершин в numpy массив
    vertex_data = np.array(vertices_list, dtype='float32')
    
    # Привязываем и загружаем данные в буфер
    glBindBuffer(GL_ARRAY_BUFFER, vbo)
    glBufferData(GL_ARRAY_BUFFER, vertex_data.nbytes, vertex_data, GL_STATIC_DRAW)
    glBindBuffer(GL_ARRAY_BUFFER, 0)

# Функция рисования блоков через VBO с текстурой
def draw_vbo_with_texture():
    global vbo, texture_id
    if vbo is None or len(vertices_list) == 0:
        return

    # Включаем клиентские состояния для работы с массивами вершин и текстурными координатами
    glEnableClientState(GL_VERTEX_ARRAY)
    glEnableClientState(GL_TEXTURE_COORD_ARRAY)
    
    # Привязываем VBO
    glBindBuffer(GL_ARRAY_BUFFER, vbo)
    
    # Указываем OpenGL где искать вершины
    glVertexPointer(3, GL_FLOAT, 5 * 4, None)
    
    # Указываем OpenGL где искать текстурные координаты
    glTexCoordPointer(2, GL_FLOAT, 5 * 4, ctypes.c_void_p(3 * 4))
    
    # Привязываем текстуру перед отрисовкой
    glBindTexture(GL_TEXTURE_2D, texture_id)
    
    # Рисуем кубы
    glDrawArrays(GL_QUADS, 0, len(vertices_list) // 5)
    
    # Отключаем клиентские состояния
    glBindBuffer(GL_ARRAY_BUFFER, 0)
    glDisableClientState(GL_VERTEX_ARRAY)
    glDisableClientState(GL_TEXTURE_COORD_ARRAY)

    # Не отвязываем текстуру после рендеринга
    # glBindTexture(GL_TEXTURE_2D, 0)

# Ограничиваем рендеринг блоков в пределах радиуса
def is_in_view(x, y, z, max_distance=15):
    global player_pos

    # Позиция блока относительно игрока
    dx = x - player_pos[0]
    dy = y - player_pos[1]
    dz = z - player_pos[2]

    # Проверка расстояния до блока
    distance = sqrt(dx ** 2 + dy ** 2 + dz ** 2)
    return distance <= max_distance

# Функция, чтобы определить блок под курсором
def get_block_under_cursor():
    global player_pos, player_angle
    ray_direction = np.array([
        np.sin(np.radians(player_angle[1])),
        -np.sin(np.radians(player_angle[0])),
        -np.cos(np.radians(player_angle[1])),
    ])
    
    # Начальная позиция луча (позиция игрока)
    ray_origin = np.array(player_pos)

    # Длина луча
    max_distance = 10
    
    for distance in np.arange(0, max_distance, 0.1):
        ray_end = ray_origin + ray_direction * distance
        
        # Проверяем, есть ли блок в этой позиции
        block_position = (int(ray_end[0]), int(ray_end[1]), int(ray_end[2]))
        if block_position in blocks:
            return block_position

    return None

# Обработка ввода
def handle_movement(keys, dt):
    global player_pos, vertical_velocity, on_ground, is_jumping

    speed = 10 * dt
    angle_y_rad = np.radians(player_angle[1])  # Угол поворота камеры по оси Y в радианах

    # Рассчитываем вектор движения вперед и вправо с учетом поворота камеры
    forward = np.array([np.sin(angle_y_rad), 0, -np.cos(angle_y_rad)])  # Вектор направления вперед
    right = np.array([np.cos(angle_y_rad), 0, np.sin(angle_y_rad)])  # Вектор направления вправо

    move_direction = np.array([0.0, 0.0, 0.0])

    if keys[K_w]:
        move_direction += forward * speed
    if keys[K_s]:
        move_direction -= forward * speed
    if keys[K_a]:
        move_direction -= right * speed
    if keys[K_d]:
        move_direction += right * speed
    
    # Прыжок
    if keys[K_SPACE] and on_ground:
        is_jumping = True
        vertical_velocity = jump_speed
        on_ground = False

    # Обновляем вертикальную позицию с учетом гравитации
    player_pos[1] += vertical_velocity

    if is_jumping:
        vertical_velocity += gravity  # Применяем гравитацию

    # Проверка на землю
    if player_pos[1] <= ground_level:
        player_pos[1] = ground_level
        vertical_velocity = 0
        is_jumping = False
        on_ground = True

    # Приседание
    if keys[K_LSHIFT]:
        player_pos[1] = max(ground_level - 0.5, player_pos[1])  # Приседание не ниже уровня земли
    else:
        player_pos[1] = ground_level  # Вернуться к уровню земли, если не приседаем

    # Проверка на выход за пределы мира
    if (player_pos[0] < -WORLD_SIZE or player_pos[0] > WORLD_SIZE or
            player_pos[2] < -WORLD_SIZE or player_pos[2] > WORLD_SIZE):
        player_pos[1] -= 0.1  # Падение вниз, если игрок вышел за пределы мира

    player_pos[0] += move_direction[0]
    player_pos[2] += move_direction[2]

# Функция отрисовки перекрестия
def draw_crosshair():
    glDisable(GL_DEPTH_TEST)  # Отключаем тест глубины для отрисовки перекрестия поверх всего
    glColor3f(0, 0, 0)  # Цвет перекрестия (черный)
    glBegin(GL_LINES)
    # Вертикальная линия
    glVertex2f(-0.01, 0)
    glVertex2f(0.01, 0)
    # Горизонтальная линия
    glVertex2f(0, -0.01)
    glVertex2f(0, 0.01)
    glEnd()
    glEnable(GL_DEPTH_TEST)  # Включаем тест глубины обратно

# Основной игровой цикл
def main():
    global blocks, texture_id
    pygame.init()
    screen = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT), DOUBLEBUF | OPENGL)
    pygame.mouse.set_visible(False)
    pygame.event.set_grab(True)  # Захват курсора мыши

    # Центр экрана
    center_x, center_y = WINDOW_WIDTH // 2, WINDOW_HEIGHT // 2
    pygame.mouse.set_pos(center_x, center_y)

    # Настройки проекции камеры
    glMatrixMode(GL_PROJECTION)
    gluPerspective(70, (WINDOW_WIDTH / WINDOW_HEIGHT), 0.1, 100.0)
    glMatrixMode(GL_MODELVIEW)

    # Включение глубины и текстур
    glEnable(GL_DEPTH_TEST)  # Включим тест глубины
    glEnable(GL_TEXTURE_2D)  # Включаем текстуры

    # Загрузка текстуры для блоков
    texture_id = load_texture("dirt.png")  # Замените на путь к вашему изображению

    # Инициализация блоков
    for x in range(-WORLD_SIZE, WORLD_SIZE):
        for z in range(-WORLD_SIZE, WORLD_SIZE):
            blocks.append((x, 0, z))

    # Обновляем VBO с начальными блоками
    update_vbo()

    # Установка фиксированного освещения
    setup_lighting()

    clock = pygame.time.Clock()
    running = True
    while running:
        dt = clock.tick(60) / 1000  # время между кадрами, ограниченное до 60 FPS
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.MOUSEBUTTONDOWN:
                block = get_block_under_cursor()
                if block:
                    if event.button == 1:  # ЛКМ
                        blocks.remove(block)  # Удаляем блок
                        update_vbo()  # Обновляем VBO
                    elif event.button == 3:  # ПКМ
                        # Ставим новый блок выше текущего
                        new_block = (block[0], block[1] + 1, block[2])
                        if new_block not in blocks:
                            blocks.append(new_block)
                            update_vbo()  # Обновляем VBO

        # Получаем относительное движение мыши (изменения по x и y)
        mouse_dx, mouse_dy = pygame.mouse.get_rel()  # Получаем относительное смещение мыши

        # Обновляем углы поворота камеры
        player_angle[1] += mouse_dx * 0.1  # вращение вправо-влево
        player_angle[0] += mouse_dy * 0.1  # вращение вверх-вниз

        # Ограничение угла наклона по вертикали
        player_angle[0] = max(-90, min(90, player_angle[0]))

        # Возвращаем курсор в центр экрана
        pygame.mouse.set_pos(center_x, center_y)

        glLoadIdentity()
        # Добавляем поворот и перемещение камеры
        glRotatef(player_angle[0], 1, 0, 0)  # Поворот по оси X
        glRotatef(player_angle[1], 0, 1, 0)  # Поворот по оси Y
        glTranslatef(-player_pos[0], -player_pos[1], -player_pos[2])  # Перемещение камеры

        keys = pygame.key.get_pressed()  # Получаем нажатые клавиши
        handle_movement(keys, dt)  # Обрабатываем движение игрока

        # Очистка экрана
        glClearColor(*SKY_COLOR, 1)
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)  # Очищаем экран и буфер глубины

        # Рисуем все блоки через VBO с текстурами
        draw_vbo_with_texture()

        # Отрисовка перекрестия
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        glOrtho(-1, 1, -1, 1, -1, 1)  # Устанавливаем ортографическую проекцию для перекрестия
        glMatrixMode(GL_MODELVIEW)
        glLoadIdentity()
        draw_crosshair()  # Рисуем перекрестие
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        gluPerspective(70, (WINDOW_WIDTH / WINDOW_HEIGHT), 0.1, 100.0)
        glMatrixMode(GL_MODELVIEW)

        pygame.display.flip()  # Обновляем экран

    pygame.quit()

if __name__ == "__main__":
    main()
